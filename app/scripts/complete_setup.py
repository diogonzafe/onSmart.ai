#!/usr/bin/env python3
# app/scripts/complete_setup.py - Vers√£o Corrigida
"""
Script completo para setup e teste do sistema multi-agentes.
Inclui cria√ß√£o de banco, popula√ß√£o de dados e testes funcionais.
"""

import os
import sys

# CORRE√á√ÉO: Configurar o PYTHONPATH corretamente
# Obter o diret√≥rio do script
script_dir = os.path.dirname(os.path.abspath(__file__))
# Subir dois n√≠veis para chegar √† pasta backend
backend_dir = os.path.dirname(os.path.dirname(script_dir))
# Adicionar ao Python path
sys.path.insert(0, backend_dir)

print(f"üìç Script directory: {script_dir}")
print(f"üìç Backend directory: {backend_dir}")
print(f"üìç Python path configurado: {backend_dir}")

import asyncio
import logging
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional

# Agora podemos importar os m√≥dulos normalmente
try:
    from sqlalchemy import create_engine, text
    from app.config import settings
    from app.db.database import SessionLocal, Base
    from app.models.user import User, AuthProvider
    from app.models.template import Template, TemplateDepartment
    from app.models.agent import Agent, AgentType
    from app.models.conversation import Conversation, ConversationStatus
    from app.models.message import Message, MessageRole
    from app.services.agent_service import get_agent_service
    from app.services.template_service import get_template_service
    from app.core.security import get_password_hash
    print("‚úÖ Todos os m√≥dulos importados com sucesso!")
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("\nüîß Poss√≠veis solu√ß√µes:")
    print("1. Certifique-se de estar na pasta backend")
    print("2. Verifique se o ambiente virtual est√° ativado")
    print("3. Execute: pip install -r requirements.txt")
    sys.exit(1)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemSetup:
    """
    Classe principal para setup completo do sistema.
    """
    
    def __init__(self):
        """Inicializa o setup."""
        try:
            self.db = SessionLocal()
            self.engine = create_engine(settings.DATABASE_URL)
            self.agent_service = get_agent_service(self.db)
            self.template_service = get_template_service(self.db)
            
            # IDs criados durante o setup
            self.demo_user_id = None
            self.template_ids = {}
            self.agent_ids = {}
            self.conversation_ids = []
            
            print("‚úÖ SystemSetup inicializado com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar SystemSetup: {e}")
            raise
    
    async def run_complete_setup(self):
        """
        Executa o setup completo do sistema.
        """
        logger.info("üöÄ Iniciando setup completo do sistema multi-agentes")
        
        try:
            # 1. Setup do banco de dados
            logger.info("üìä Configurando banco de dados...")
            await self._setup_database()
            
            # 2. Criar usu√°rio demo
            logger.info("üë§ Criando usu√°rio demo...")
            await self._create_demo_user()
            
            # 3. Criar templates padr√£o
            logger.info("üìã Criando templates padr√£o...")
            await self._create_default_templates()
            
            # 4. Criar agentes demo
            logger.info("ü§ñ Criando agentes demo...")
            await self._create_demo_agents()
            
            # 5. Executar testes funcionais
            logger.info("üß™ Executando testes funcionais...")
            await self._run_functional_tests()
            
            # 6. Relat√≥rio final
            logger.info("üìà Gerando relat√≥rio final...")
            await self._generate_final_report()
            
            logger.info("‚úÖ Setup completo finalizado com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante o setup: {str(e)}")
            import traceback
            traceback.print_exc()
            raise
        finally:
            self.db.close()
    
    async def _setup_database(self):
        """Configura o banco de dados."""
        logger.info("   - Verificando conex√£o com o banco...")
        
        try:
            with self.engine.connect() as connection:
                # Testar conex√£o
                connection.execute(text("SELECT 1"))
                logger.info("   ‚úì Conex√£o com banco de dados estabelecida")
                
                # Criar extens√£o vector
                try:
                    connection.execute(text("CREATE EXTENSION IF NOT EXISTS vector;"))
                    connection.commit()
                    logger.info("   ‚úì Extens√£o pgvector criada/verificada")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è N√£o foi poss√≠vel criar extens√£o pgvector: {e}")
                    logger.info("   ‚ÑπÔ∏è Continuando sem pgvector...")
                
                # Criar todas as tabelas
                Base.metadata.create_all(bind=self.engine)
                logger.info("   ‚úì Tabelas do banco criadas/verificadas")
                
                # Criar √≠ndices de performance
                performance_indices = [
                    "CREATE INDEX IF NOT EXISTS idx_agents_user_type ON agents(user_id, type);",
                    "CREATE INDEX IF NOT EXISTS idx_conversations_user_agent ON conversations(user_id, agent_id);",
                    "CREATE INDEX IF NOT EXISTS idx_messages_conversation_created ON messages(conversation_id, created_at);",
                    "CREATE INDEX IF NOT EXISTS idx_templates_dept_public ON templates(department, is_public);"
                ]
                
                for index_sql in performance_indices:
                    try:
                        connection.execute(text(index_sql))
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è Erro ao criar √≠ndice: {e}")
                
                connection.commit()
                logger.info("   ‚úì √çndices de performance criados")
                
        except Exception as e:
            logger.error(f"   ‚ùå Erro na configura√ß√£o do banco: {str(e)}")
            raise
    
    async def _create_demo_user(self):
        """Cria um usu√°rio demo para testes."""
        demo_email = "demo@techcorp.com"
        
        # Verificar se j√° existe
        existing_user = self.db.query(User).filter(User.email == demo_email).first()
        
        if existing_user:
            self.demo_user_id = existing_user.id
            logger.info(f"   ‚úì Usu√°rio demo j√° existe: {demo_email}")
            return
        
        # Criar novo usu√°rio
        demo_user = User(
            id=str(uuid.uuid4()),
            email=demo_email,
            name="Demo User - TechCorp",
            hashed_password=get_password_hash("demo123"),
            provider=AuthProvider.LOCAL,
            is_verified=True,
            is_active=True
        )
        
        self.db.add(demo_user)
        self.db.commit()
        self.db.refresh(demo_user)
        
        self.demo_user_id = demo_user.id
        logger.info(f"   ‚úì Usu√°rio demo criado: {demo_email} (ID: {self.demo_user_id})")
    
    async def _create_default_templates(self):
        """Cria templates padr√£o para todos os departamentos."""
        templates_config = {
            "supervisor": {
                "name": "Supervisor Geral",
                "description": "Template para agente supervisor que coordena outros agentes",
                "department": TemplateDepartment.CUSTOM,
                "prompt_template": """Voc√™ √© um supervisor inteligente da {{company_name}}, especializada em {{industry}}.

Sua fun√ß√£o √© analisar solicita√ß√µes e direcionar para o agente mais adequado:

üéØ MARKETING: Campanhas, redes sociais, branding, conte√∫do, an√°lise de mercado
üí∞ VENDAS: Prospec√ß√£o, negocia√ß√£o, propostas, relacionamento com clientes
üìä FINAN√áAS: An√°lise financeira, or√ßamentos, relat√≥rios, indicadores, ROI

Ao receber uma solicita√ß√£o:
1. Analise o conte√∫do cuidadosamente
2. Identifique o departamento mais adequado
3. Explique brevemente sua decis√£o
4. Direcione para o agente especializado

Empresa: {{company_name}}
Setor: {{industry}}
Prioridade atual: {{priority}}""",
                "tools_config": {"allowed_tools": ["routing", "analysis"]},
                "llm_config": {"temperature": 0.3, "max_tokens": 1024}
            },
            
            "marketing": {
                "name": "Especialista em Marketing Digital",
                "description": "Agente especializado em marketing digital e estrat√©gias de crescimento",
                "department": TemplateDepartment.MARKETING,
                "prompt_template": """Voc√™ √© um especialista em marketing digital da {{company_name}}.

üéØ ESPECIALIDADES:
- Marketing Digital e Redes Sociais (foco em {{primary_platform}})
- Estrat√©gias de Conte√∫do e SEO
- Campanhas de Performance e Branding
- An√°lise de M√©tricas e ROI

üìä SOBRE A EMPRESA:
- Empresa: {{company_name}}
- Setor: {{industry}}
- Tom da marca: {{brand_tone}}
- P√∫blico-alvo: {{target_audience}}
- Diferenciais: {{differentials}}

üéØ ABORDAGEM:
Seja estrat√©gico, criativo e focado em resultados. Sempre considere o {{metric_priority}} como indicador principal de sucesso.

Como especialista em {{especialidade}}, forne√ßa insights pr√°ticos e acion√°veis.""",
                "tools_config": {"allowed_tools": ["social_media", "analytics", "content_tools"]},
                "llm_config": {"temperature": 0.7, "max_tokens": 1536}
            },
            
            "sales": {
                "name": "Consultor de Vendas B2B",
                "description": "Agente especializado em vendas consultivas e relacionamento com clientes",
                "department": TemplateDepartment.SALES,
                "prompt_template": """Voc√™ √© um consultor de vendas especialista da {{company_name}}.

üíº PORTF√ìLIO:
- Categoria: {{product_category}}
- Produtos: {{products_list}}
- Estilo de vendas: {{sales_style}}
- Prioridade: {{sales_priority}}

ü§ù POL√çTICA COMERCIAL:
- Pre√ßos: {{pricing_policy}}
- Pagamento: {{payment_terms}}
- Entrega: {{delivery_time}}
- Devolu√ß√µes: {{return_policy}}
- Descontos: {{discount_level}}

üéØ ABORDAGEM:
Use uma abordagem consultiva, identifique necessidades reais, apresente solu√ß√µes relevantes e conduza naturalmente ao fechamento.

Seja um parceiro estrat√©gico, n√£o apenas um vendedor.""",
                "tools_config": {"allowed_tools": ["crm", "product_catalog", "proposal_generator"]},
                "llm_config": {"temperature": 0.6, "max_tokens": 1024}
            },
            
            "finance": {
                "name": "Analista Financeiro S√™nior",
                "description": "Agente especializado em an√°lises financeiras e planejamento estrat√©gico",
                "department": TemplateDepartment.FINANCE,
                "prompt_template": """Voc√™ √© um analista financeiro s√™nior da {{company_name}}.

üìä ESPECIALIZA√á√ÉO:
- Tipo de an√°lise: {{analysis_type}}
- Metodologia: {{analysis_methodology}}
- Per√≠odo de an√°lise: {{analysis_period}}
- Moeda: {{currency}}

üè¢ CONTEXTO DA EMPRESA:
- Empresa: {{company_name}}
- Setor: {{industry}}
- Concorrentes: {{competitors}}
- Indicadores-chave: {{key_indicators}}
- Normas cont√°beis: {{accounting_standards}}

üéØ ABORDAGEM:
Seja preciso, anal√≠tico e estrat√©gico. Forne√ßa insights baseados em dados, identifique tend√™ncias e recomende a√ß√µes concretas.

Sempre contextualize n√∫meros e explique o impacto no neg√≥cio.""",
                "tools_config": {"allowed_tools": ["financial_calculator", "report_generator", "data_analyzer"]},
                "llm_config": {"temperature": 0.3, "max_tokens": 1536}
            }
        }
        
        for template_key, config in templates_config.items():
            # Verificar se j√° existe
            existing = self.db.query(Template).filter(
                Template.name == config["name"],
                Template.is_public == True,
                Template.user_id == None
            ).first()
            
            if existing:
                self.template_ids[template_key] = existing.id
                logger.info(f"   ‚úì Template {template_key} j√° existe")
                continue
            
            # Criar template
            template = self.template_service.create_template(
                name=config["name"],
                description=config["description"],
                department=config["department"],
                is_public=True,
                user_id=None,  # Template do sistema
                prompt_template=config["prompt_template"],
                tools_config=config["tools_config"],
                llm_config=config["llm_config"]
            )
            
            self.template_ids[template_key] = template.id
            logger.info(f"   ‚úì Template {template_key} criado: {template.name}")
    
    async def _create_demo_agents(self):
        """Cria agentes demo para demonstra√ß√£o."""
        agents_config = [
            {
                "key": "supervisor",
                "name": "Coordenador TechCorp",
                "type": AgentType.SUPERVISOR,
                "template": "supervisor",
                "config": {
                    "company_name": "TechCorp Solutions",
                    "industry": "Tecnologia",
                    "priority": "Crescimento sustent√°vel e inova√ß√£o"
                }
            },
            {
                "key": "marketing",
                "name": "Sarah - Marketing Digital",
                "type": AgentType.MARKETING,
                "template": "marketing",
                "config": {
                    "company_name": "TechCorp Solutions",
                    "industry": "Tecnologia",
                    "primary_platform": "LinkedIn",
                    "brand_tone": "profissional e inovador",
                    "target_audience": "Empresas de m√©dio e grande porte",
                    "differentials": "Tecnologia de ponta, suporte premium, ROI comprovado",
                    "metric_priority": "gera√ß√£o de leads qualificados",
                    "especialidade": "Marketing B2B e Growth Hacking"
                }
            },
            {
                "key": "sales",
                "name": "Carlos - Consultor de Vendas",
                "type": AgentType.SALES,
                "template": "sales",
                "config": {
                    "company_name": "TechCorp Solutions",
                    "product_category": "Solu√ß√µes tecnol√≥gicas empresariais",
                    "products_list": "CRM personalizado, ERP integrado, BI Analytics, Cloud Infrastructure",
                    "sales_style": "consultivo e estrat√©gico",
                    "sales_priority": "construir relacionamentos de longo prazo",
                    "pricing_policy": "valor baseado em ROI do cliente",
                    "payment_terms": "flex√≠vel: mensal, trimestral ou anual",
                    "delivery_time": "implanta√ß√£o em 30-90 dias",
                    "return_policy": "garantia de satisfa√ß√£o de 60 dias",
                    "discount_level": "at√© 20% para contratos anuais"
                }
            },
            {
                "key": "finance",
                "name": "Ana - Analista Financeira",
                "type": AgentType.FINANCE,
                "template": "finance",
                "config": {
                    "company_name": "TechCorp Solutions",
                    "industry": "Tecnologia",
                    "analysis_type": "Performance financeira e ROI",
                    "analysis_methodology": "An√°lise comparativa e proje√ß√µes",
                    "analysis_period": "mensal com proje√ß√µes trimestrais",
                    "currency": "BRL",
                    "competitors": "SoftTech, InnovaCorp, TechGlobal",
                    "key_indicators": "ARR, CAC, LTV, Churn Rate, Margem Bruta",
                    "accounting_standards": "IFRS"
                }
            }
        ]
        
        for agent_config in agents_config:
            try:
                agent = self.agent_service.create_agent(
                    user_id=self.demo_user_id,
                    name=agent_config["name"],
                    description=f"Agente demo para {agent_config['type'].value}",
                    agent_type=agent_config["type"],
                    template_id=self.template_ids[agent_config["template"]],
                    configuration=agent_config["config"]
                )
                
                self.agent_ids[agent_config["key"]] = agent.id
                logger.info(f"   ‚úì Agente criado: {agent.name} ({agent_config['type'].value})")
            except Exception as e:
                logger.error(f"   ‚ùå Erro ao criar agente {agent_config['name']}: {e}")
    
    async def _run_functional_tests(self):
        """Executa testes funcionais do sistema."""
        test_scenarios = [
            {
                "description": "Solicita√ß√£o de campanha de marketing",
                "message": "Preciso de uma estrat√©gia completa para lan√ßar nosso novo produto CRM no LinkedIn. Qual seria a melhor abordagem?",
                "expected_department": "marketing"
            },
            {
                "description": "Consulta sobre vendas",
                "message": "Como posso melhorar nossa taxa de convers√£o de leads? Estamos com dificuldade no fechamento de vendas.",
                "expected_department": "sales"
            },
            {
                "description": "An√°lise financeira",
                "message": "Preciso de uma an√°lise do ROI das nossas campanhas de marketing do √∫ltimo trimestre. Pode me ajudar?",
                "expected_department": "finance"
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            logger.info(f"   üß™ Teste {i}: {scenario['description']}")
            
            try:
                # Criar conversa para o teste
                conversation = Conversation(
                    id=str(uuid.uuid4()),
                    title=f"Teste Funcional {i}",
                    user_id=self.demo_user_id,
                    agent_id=self.agent_ids["supervisor"],
                    status=ConversationStatus.ACTIVE,
                    meta_data={"test": True, "scenario": scenario["description"]}
                )
                
                self.db.add(conversation)
                self.db.commit()
                self.db.refresh(conversation)
                self.conversation_ids.append(conversation.id)
                
                # Processar mensagem com o supervisor
                try:
                    response = await self.agent_service.process_message(
                        agent_id=self.agent_ids["supervisor"],
                        conversation_id=conversation.id,
                        message=scenario["message"]
                    )
                    
                    # Verificar resposta
                    agent_response = response.get("agent_response", {})
                    if agent_response:
                        logger.info(f"     ‚úì Supervisor respondeu: {agent_response.get('message', {}).get('content', '')[:100]}...")
                        
                        # Verificar se direcionou corretamente
                        metadata = agent_response.get("metadata", {})
                        selected_dept = metadata.get("selected_department")
                        
                        if selected_dept == scenario["expected_department"]:
                            logger.info(f"     ‚úì Direcionamento correto: {selected_dept}")
                        else:
                            logger.warning(f"     ‚ö†Ô∏è Direcionamento inesperado: {selected_dept} (esperado: {scenario['expected_department']})")
                    else:
                        logger.error(f"     ‚ùå Nenhuma resposta recebida")
                        
                except Exception as e:
                    logger.error(f"     ‚ùå Erro ao processar mensagem: {e}")
                
                # Pequena pausa entre testes
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"     ‚ùå Erro no teste {i}: {str(e)}")
    
    async def _generate_final_report(self):
        """Gera relat√≥rio final do setup."""
        report = {
            "timestamp": datetime.utcnow().isoformat(),
            "demo_user_id": self.demo_user_id,
            "templates_created": len(self.template_ids),
            "agents_created": len(self.agent_ids),
            "test_conversations": len(self.conversation_ids),
            "components": {
                "database": "‚úÖ Configurado",
                "templates": "‚úÖ Criados",
                "agents": "‚úÖ Criados",
                "tests": "‚úÖ Executados"
            }
        }
        
        logger.info("üìà RELAT√ìRIO FINAL DO SETUP:")
        logger.info(f"   üë§ Usu√°rio demo: {self.demo_user_id}")
        logger.info(f"   üìã Templates: {list(self.template_ids.keys())}")
        logger.info(f"   ü§ñ Agentes: {list(self.agent_ids.keys())}")
        logger.info(f"   üí¨ Conversas de teste: {len(self.conversation_ids)}")
        
        # Salvar relat√≥rio em arquivo
        import json
        try:
            report_path = os.path.join(backend_dir, "setup_report.json")
            with open(report_path, "w") as f:
                json.dump(report, f, indent=2)
            logger.info(f"   üìÑ Relat√≥rio salvo em: {report_path}")
        except Exception as e:
            logger.error(f"   ‚ùå Erro ao salvar relat√≥rio: {str(e)}")

async def main():
    """Fun√ß√£o principal."""
    print("üöÄ SETUP COMPLETO DO SISTEMA MULTI-AGENTES")
    print("=" * 60)
    
    try:
        setup = SystemSetup()
        await setup.run_complete_setup()
        
        print("\n‚úÖ SETUP CONCLU√çDO COM SUCESSO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Acesse a aplica√ß√£o em: http://localhost:8000")
        print("2. Fa√ßa login com: demo@techcorp.com / demo123")
        print("3. Teste os agentes criados")
        print("4. Visualize m√©tricas em: http://localhost:8000/api/metrics")
        print("5. Explore a documenta√ß√£o da API em: http://localhost:8000/docs")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante o setup: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))